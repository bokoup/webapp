schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "burn_delegated_promo_token"
"""
type BurnDelegatedPromoToken {
  adminSettings: String!
  authority: String!
  createdAt: timestamptz!
  memo(
    """JSON select path"""
    path: String
  ): jsonb
  mint: String!

  """An object relationship"""
  mintObject: Mint
  modifiedAt: timestamptz!
  payer: String!
  platform: String!
  promo: String!
  promoGroup: String!

  """An object relationship"""
  promoObject: Promo
  signature: String!
  slot: bigint!
  tokenAccount: String!

  """An object relationship"""
  tokenAccountObject: TokenAccount
}

"""
Boolean expression to filter rows from the table "burn_delegated_promo_token". All fields are combined with a logical 'AND'.
"""
input BurnDelegatedPromoTokenBoolExp {
  _and: [BurnDelegatedPromoTokenBoolExp!]
  _not: BurnDelegatedPromoTokenBoolExp
  _or: [BurnDelegatedPromoTokenBoolExp!]
  adminSettings: StringComparisonExp
  authority: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  memo: JsonbComparisonExp
  mint: StringComparisonExp
  mintObject: MintBoolExp
  modifiedAt: TimestamptzComparisonExp
  payer: StringComparisonExp
  platform: StringComparisonExp
  promo: StringComparisonExp
  promoGroup: StringComparisonExp
  promoObject: PromoBoolExp
  signature: StringComparisonExp
  slot: BigintComparisonExp
  tokenAccount: StringComparisonExp
  tokenAccountObject: TokenAccountBoolExp
}

"""
Ordering options when selecting data from "burn_delegated_promo_token".
"""
input BurnDelegatedPromoTokenOrderBy {
  adminSettings: OrderBy
  authority: OrderBy
  createdAt: OrderBy
  memo: OrderBy
  mint: OrderBy
  mintObject: MintOrderBy
  modifiedAt: OrderBy
  payer: OrderBy
  platform: OrderBy
  promo: OrderBy
  promoGroup: OrderBy
  promoObject: PromoOrderBy
  signature: OrderBy
  slot: OrderBy
  tokenAccount: OrderBy
  tokenAccountObject: TokenAccountOrderBy
}

"""
select columns of table "burn_delegated_promo_token"
"""
enum BurnDelegatedPromoTokenSelectColumn {
  """column name"""
  adminSettings

  """column name"""
  authority

  """column name"""
  createdAt

  """column name"""
  memo

  """column name"""
  mint

  """column name"""
  modifiedAt

  """column name"""
  payer

  """column name"""
  platform

  """column name"""
  promo

  """column name"""
  promoGroup

  """column name"""
  signature

  """column name"""
  slot

  """column name"""
  tokenAccount
}

"""
Streaming cursor of the table "burn_delegated_promo_token"
"""
input BurnDelegatedPromoTokenStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: BurnDelegatedPromoTokenStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input BurnDelegatedPromoTokenStreamCursorValueInput {
  adminSettings: String
  authority: String
  createdAt: timestamptz
  memo: jsonb
  mint: String
  modifiedAt: timestamptz
  payer: String
  platform: String
  promo: String
  promoGroup: String
  signature: String
  slot: bigint
  tokenAccount: String
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "delegate_promo_token"
"""
type DelegatePromoToken {
  createdAt: timestamptz!
  delegate: String!
  memo(
    """JSON select path"""
    path: String
  ): jsonb
  modifiedAt: timestamptz!
  payer: String!
  promo: String!
  promoGroup: String!

  """An object relationship"""
  promoObject: Promo
  signature: String!
  slot: bigint!
  tokenAccount: String!

  """An object relationship"""
  tokenAccountObject: TokenAccount
  tokenOwner: String!
}

"""
Boolean expression to filter rows from the table "delegate_promo_token". All fields are combined with a logical 'AND'.
"""
input DelegatePromoTokenBoolExp {
  _and: [DelegatePromoTokenBoolExp!]
  _not: DelegatePromoTokenBoolExp
  _or: [DelegatePromoTokenBoolExp!]
  createdAt: TimestamptzComparisonExp
  delegate: StringComparisonExp
  memo: JsonbComparisonExp
  modifiedAt: TimestamptzComparisonExp
  payer: StringComparisonExp
  promo: StringComparisonExp
  promoGroup: StringComparisonExp
  promoObject: PromoBoolExp
  signature: StringComparisonExp
  slot: BigintComparisonExp
  tokenAccount: StringComparisonExp
  tokenAccountObject: TokenAccountBoolExp
  tokenOwner: StringComparisonExp
}

"""Ordering options when selecting data from "delegate_promo_token"."""
input DelegatePromoTokenOrderBy {
  createdAt: OrderBy
  delegate: OrderBy
  memo: OrderBy
  modifiedAt: OrderBy
  payer: OrderBy
  promo: OrderBy
  promoGroup: OrderBy
  promoObject: PromoOrderBy
  signature: OrderBy
  slot: OrderBy
  tokenAccount: OrderBy
  tokenAccountObject: TokenAccountOrderBy
  tokenOwner: OrderBy
}

"""
select columns of table "delegate_promo_token"
"""
enum DelegatePromoTokenSelectColumn {
  """column name"""
  createdAt

  """column name"""
  delegate

  """column name"""
  memo

  """column name"""
  modifiedAt

  """column name"""
  payer

  """column name"""
  promo

  """column name"""
  promoGroup

  """column name"""
  signature

  """column name"""
  slot

  """column name"""
  tokenAccount

  """column name"""
  tokenOwner
}

"""
Streaming cursor of the table "delegate_promo_token"
"""
input DelegatePromoTokenStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: DelegatePromoTokenStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input DelegatePromoTokenStreamCursorValueInput {
  createdAt: timestamptz
  delegate: String
  memo: jsonb
  modifiedAt: timestamptz
  payer: String
  promo: String
  promoGroup: String
  signature: String
  slot: bigint
  tokenAccount: String
  tokenOwner: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input JsonbCastExp {
  String: StringComparisonExp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
  _cast: JsonbCastExp

  """is the column contained in the given json value"""
  _containedIn: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _hasKey: String

  """do all of these strings exist as top-level keys in the column"""
  _hasKeysAll: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "metadata"
"""
type Metadata {
  collectionKey: String
  collectionVerified: Boolean
  createdAt: timestamptz!
  editionNonce: Int
  id: String!
  isMutable: Boolean!
  key: String!
  metadataJson(
    """JSON select path"""
    path: String
  ): jsonb
  mint: String!
  modifiedAt: timestamptz!
  name: String!
  primarySaleHappened: Boolean!
  sellerFeeBasisPoints: Int!
  slot: bigint!
  symbol: String!
  tokenStandard: String
  updateAuthority: String!
  uri: String!
  usesRemaining: bigint
  usesTotal: bigint
  usesUseMethod: String
  writeVersion: bigint!
}

"""
Boolean expression to filter rows from the table "metadata". All fields are combined with a logical 'AND'.
"""
input MetadataBoolExp {
  _and: [MetadataBoolExp!]
  _not: MetadataBoolExp
  _or: [MetadataBoolExp!]
  collectionKey: StringComparisonExp
  collectionVerified: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  editionNonce: IntComparisonExp
  id: StringComparisonExp
  isMutable: BooleanComparisonExp
  key: StringComparisonExp
  metadataJson: JsonbComparisonExp
  mint: StringComparisonExp
  modifiedAt: TimestamptzComparisonExp
  name: StringComparisonExp
  primarySaleHappened: BooleanComparisonExp
  sellerFeeBasisPoints: IntComparisonExp
  slot: BigintComparisonExp
  symbol: StringComparisonExp
  tokenStandard: StringComparisonExp
  updateAuthority: StringComparisonExp
  uri: StringComparisonExp
  usesRemaining: BigintComparisonExp
  usesTotal: BigintComparisonExp
  usesUseMethod: StringComparisonExp
  writeVersion: BigintComparisonExp
}

"""Ordering options when selecting data from "metadata"."""
input MetadataOrderBy {
  collectionKey: OrderBy
  collectionVerified: OrderBy
  createdAt: OrderBy
  editionNonce: OrderBy
  id: OrderBy
  isMutable: OrderBy
  key: OrderBy
  metadataJson: OrderBy
  mint: OrderBy
  modifiedAt: OrderBy
  name: OrderBy
  primarySaleHappened: OrderBy
  sellerFeeBasisPoints: OrderBy
  slot: OrderBy
  symbol: OrderBy
  tokenStandard: OrderBy
  updateAuthority: OrderBy
  uri: OrderBy
  usesRemaining: OrderBy
  usesTotal: OrderBy
  usesUseMethod: OrderBy
  writeVersion: OrderBy
}

"""
select columns of table "metadata"
"""
enum MetadataSelectColumn {
  """column name"""
  collectionKey

  """column name"""
  collectionVerified

  """column name"""
  createdAt

  """column name"""
  editionNonce

  """column name"""
  id

  """column name"""
  isMutable

  """column name"""
  key

  """column name"""
  metadataJson

  """column name"""
  mint

  """column name"""
  modifiedAt

  """column name"""
  name

  """column name"""
  primarySaleHappened

  """column name"""
  sellerFeeBasisPoints

  """column name"""
  slot

  """column name"""
  symbol

  """column name"""
  tokenStandard

  """column name"""
  updateAuthority

  """column name"""
  uri

  """column name"""
  usesRemaining

  """column name"""
  usesTotal

  """column name"""
  usesUseMethod

  """column name"""
  writeVersion
}

"""
Streaming cursor of the table "metadata"
"""
input MetadataStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: MetadataStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input MetadataStreamCursorValueInput {
  collectionKey: String
  collectionVerified: Boolean
  createdAt: timestamptz
  editionNonce: Int
  id: String
  isMutable: Boolean
  key: String
  metadataJson: jsonb
  mint: String
  modifiedAt: timestamptz
  name: String
  primarySaleHappened: Boolean
  sellerFeeBasisPoints: Int
  slot: bigint
  symbol: String
  tokenStandard: String
  updateAuthority: String
  uri: String
  usesRemaining: bigint
  usesTotal: bigint
  usesUseMethod: String
  writeVersion: bigint
}

"""
columns and relationships of "mint"
"""
type Mint {
  createdAt: timestamptz
  decimals: Int!
  freezeAuthority: String
  id: String!
  isInitialized: Boolean!
  mintAuthority: String
  modifiedAt: timestamptz

  """An object relationship"""
  promoObject: Promo
  slot: bigint!
  supply: bigint!

  """An array relationship"""
  tokenAccounts(
    """distinct select on columns"""
    distinctOn: [TokenAccountSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TokenAccountOrderBy!]

    """filter the rows returned"""
    where: TokenAccountBoolExp
  ): [TokenAccount!]!
  writeVersion: bigint!
}

"""
Boolean expression to filter rows from the table "mint". All fields are combined with a logical 'AND'.
"""
input MintBoolExp {
  _and: [MintBoolExp!]
  _not: MintBoolExp
  _or: [MintBoolExp!]
  createdAt: TimestamptzComparisonExp
  decimals: IntComparisonExp
  freezeAuthority: StringComparisonExp
  id: StringComparisonExp
  isInitialized: BooleanComparisonExp
  mintAuthority: StringComparisonExp
  modifiedAt: TimestamptzComparisonExp
  promoObject: PromoBoolExp
  slot: BigintComparisonExp
  supply: BigintComparisonExp
  tokenAccounts: TokenAccountBoolExp
  writeVersion: BigintComparisonExp
}

"""Ordering options when selecting data from "mint"."""
input MintOrderBy {
  createdAt: OrderBy
  decimals: OrderBy
  freezeAuthority: OrderBy
  id: OrderBy
  isInitialized: OrderBy
  mintAuthority: OrderBy
  modifiedAt: OrderBy
  promoObject: PromoOrderBy
  slot: OrderBy
  supply: OrderBy
  tokenAccountsAggregate: TokenAccountAggregateOrderBy
  writeVersion: OrderBy
}

"""
columns and relationships of "mint_promo_token"
"""
type MintPromoToken {
  authority: String!
  createdAt: timestamptz!
  memo(
    """JSON select path"""
    path: String
  ): jsonb
  mint: String!

  """An object relationship"""
  mintObject: Mint
  modifiedAt: timestamptz!
  payer: String!
  promo: String!
  promoGroup: String!

  """An object relationship"""
  promoObject: Promo
  signature: String!
  slot: bigint!
  tokenAccount: String!
  tokenOwner: String!
}

"""
Boolean expression to filter rows from the table "mint_promo_token". All fields are combined with a logical 'AND'.
"""
input MintPromoTokenBoolExp {
  _and: [MintPromoTokenBoolExp!]
  _not: MintPromoTokenBoolExp
  _or: [MintPromoTokenBoolExp!]
  authority: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  memo: JsonbComparisonExp
  mint: StringComparisonExp
  mintObject: MintBoolExp
  modifiedAt: TimestamptzComparisonExp
  payer: StringComparisonExp
  promo: StringComparisonExp
  promoGroup: StringComparisonExp
  promoObject: PromoBoolExp
  signature: StringComparisonExp
  slot: BigintComparisonExp
  tokenAccount: StringComparisonExp
  tokenOwner: StringComparisonExp
}

"""Ordering options when selecting data from "mint_promo_token"."""
input MintPromoTokenOrderBy {
  authority: OrderBy
  createdAt: OrderBy
  memo: OrderBy
  mint: OrderBy
  mintObject: MintOrderBy
  modifiedAt: OrderBy
  payer: OrderBy
  promo: OrderBy
  promoGroup: OrderBy
  promoObject: PromoOrderBy
  signature: OrderBy
  slot: OrderBy
  tokenAccount: OrderBy
  tokenOwner: OrderBy
}

"""
select columns of table "mint_promo_token"
"""
enum MintPromoTokenSelectColumn {
  """column name"""
  authority

  """column name"""
  createdAt

  """column name"""
  memo

  """column name"""
  mint

  """column name"""
  modifiedAt

  """column name"""
  payer

  """column name"""
  promo

  """column name"""
  promoGroup

  """column name"""
  signature

  """column name"""
  slot

  """column name"""
  tokenAccount

  """column name"""
  tokenOwner
}

"""
Streaming cursor of the table "mint_promo_token"
"""
input MintPromoTokenStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: MintPromoTokenStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input MintPromoTokenStreamCursorValueInput {
  authority: String
  createdAt: timestamptz
  memo: jsonb
  mint: String
  modifiedAt: timestamptz
  payer: String
  promo: String
  promoGroup: String
  signature: String
  slot: bigint
  tokenAccount: String
  tokenOwner: String
}

"""
select columns of table "mint"
"""
enum MintSelectColumn {
  """column name"""
  createdAt

  """column name"""
  decimals

  """column name"""
  freezeAuthority

  """column name"""
  id

  """column name"""
  isInitialized

  """column name"""
  mintAuthority

  """column name"""
  modifiedAt

  """column name"""
  slot

  """column name"""
  supply

  """column name"""
  writeVersion
}

"""
Streaming cursor of the table "mint"
"""
input MintStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: MintStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input MintStreamCursorValueInput {
  createdAt: timestamptz
  decimals: Int
  freezeAuthority: String
  id: String
  isInitialized: Boolean
  mintAuthority: String
  modifiedAt: timestamptz
  slot: bigint
  supply: bigint
  writeVersion: bigint
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
columns and relationships of "promo"
"""
type Promo {
  burnCount: Int!
  createdAt: timestamptz!

  """An object relationship"""
  groupObject: PromoGroup
  id: String!
  maxBurn: Int
  maxMint: Int
  metadata: String!

  """An object relationship"""
  metadataObject: Metadata
  mint: String!
  mintCount: Int!

  """An object relationship"""
  mintObject: Mint
  modifiedAt: timestamptz!
  owner: String!
  slot: bigint!
  writeVersion: bigint!
}

"""
order by aggregate values of table "promo"
"""
input PromoAggregateOrderBy {
  avg: promo_avg_order_by
  count: OrderBy
  max: promo_max_order_by
  min: promo_min_order_by
  stddev: promo_stddev_order_by
  stddev_pop: promo_stddev_pop_order_by
  stddev_samp: promo_stddev_samp_order_by
  sum: promo_sum_order_by
  var_pop: promo_var_pop_order_by
  var_samp: promo_var_samp_order_by
  variance: promo_variance_order_by
}

"""
Boolean expression to filter rows from the table "promo". All fields are combined with a logical 'AND'.
"""
input PromoBoolExp {
  _and: [PromoBoolExp!]
  _not: PromoBoolExp
  _or: [PromoBoolExp!]
  burnCount: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  groupObject: PromoGroupBoolExp
  id: StringComparisonExp
  maxBurn: IntComparisonExp
  maxMint: IntComparisonExp
  metadata: StringComparisonExp
  metadataObject: MetadataBoolExp
  mint: StringComparisonExp
  mintCount: IntComparisonExp
  mintObject: MintBoolExp
  modifiedAt: TimestamptzComparisonExp
  owner: StringComparisonExp
  slot: BigintComparisonExp
  writeVersion: BigintComparisonExp
}

"""
columns and relationships of "promo_group"
"""
type PromoGroup {
  createdAt: timestamptz!
  id: String!
  members(
    """JSON select path"""
    path: String
  ): jsonb!
  modifiedAt: timestamptz!
  nonce: Int!
  owner: String!

  """An array relationship"""
  promos(
    """distinct select on columns"""
    distinctOn: [PromoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoOrderBy!]

    """filter the rows returned"""
    where: PromoBoolExp
  ): [Promo!]!
  seed: String!
  slot: bigint!
  writeVersion: bigint!
}

"""
Boolean expression to filter rows from the table "promo_group". All fields are combined with a logical 'AND'.
"""
input PromoGroupBoolExp {
  _and: [PromoGroupBoolExp!]
  _not: PromoGroupBoolExp
  _or: [PromoGroupBoolExp!]
  createdAt: TimestamptzComparisonExp
  id: StringComparisonExp
  members: JsonbComparisonExp
  modifiedAt: TimestamptzComparisonExp
  nonce: IntComparisonExp
  owner: StringComparisonExp
  promos: PromoBoolExp
  seed: StringComparisonExp
  slot: BigintComparisonExp
  writeVersion: BigintComparisonExp
}

"""Ordering options when selecting data from "promo_group"."""
input PromoGroupOrderBy {
  createdAt: OrderBy
  id: OrderBy
  members: OrderBy
  modifiedAt: OrderBy
  nonce: OrderBy
  owner: OrderBy
  promosAggregate: PromoAggregateOrderBy
  seed: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
select columns of table "promo_group"
"""
enum PromoGroupSelectColumn {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  members

  """column name"""
  modifiedAt

  """column name"""
  nonce

  """column name"""
  owner

  """column name"""
  seed

  """column name"""
  slot

  """column name"""
  writeVersion
}

"""
Streaming cursor of the table "promo_group"
"""
input PromoGroupStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PromoGroupStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PromoGroupStreamCursorValueInput {
  createdAt: timestamptz
  id: String
  members: jsonb
  modifiedAt: timestamptz
  nonce: Int
  owner: String
  seed: String
  slot: bigint
  writeVersion: bigint
}

"""Ordering options when selecting data from "promo"."""
input PromoOrderBy {
  burnCount: OrderBy
  createdAt: OrderBy
  groupObject: PromoGroupOrderBy
  id: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  metadata: OrderBy
  metadataObject: MetadataOrderBy
  mint: OrderBy
  mintCount: OrderBy
  mintObject: MintOrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
select columns of table "promo"
"""
enum PromoSelectColumn {
  """column name"""
  burnCount

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  maxBurn

  """column name"""
  maxMint

  """column name"""
  metadata

  """column name"""
  mint

  """column name"""
  mintCount

  """column name"""
  modifiedAt

  """column name"""
  owner

  """column name"""
  slot

  """column name"""
  writeVersion
}

"""
Streaming cursor of the table "promo"
"""
input PromoStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PromoStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PromoStreamCursorValueInput {
  burnCount: Int
  createdAt: timestamptz
  id: String
  maxBurn: Int
  maxMint: Int
  metadata: String
  mint: String
  mintCount: Int
  modifiedAt: timestamptz
  owner: String
  slot: bigint
  writeVersion: bigint
}

"""
columns and relationships of "promo_transactions"
"""
type PromoTransactions {
  authority: String
  memo(
    """JSON select path"""
    path: String
  ): jsonb
  mint: String
  payer: String
  promo: String
  promoGroup: String
  signature: String
  slot: bigint
  tokenAccount: String
  transactionType: String
}

"""
Boolean expression to filter rows from the table "promo_transactions". All fields are combined with a logical 'AND'.
"""
input PromoTransactionsBoolExp {
  _and: [PromoTransactionsBoolExp!]
  _not: PromoTransactionsBoolExp
  _or: [PromoTransactionsBoolExp!]
  authority: StringComparisonExp
  memo: JsonbComparisonExp
  mint: StringComparisonExp
  payer: StringComparisonExp
  promo: StringComparisonExp
  promoGroup: StringComparisonExp
  signature: StringComparisonExp
  slot: BigintComparisonExp
  tokenAccount: StringComparisonExp
  transactionType: StringComparisonExp
}

"""Ordering options when selecting data from "promo_transactions"."""
input PromoTransactionsOrderBy {
  authority: OrderBy
  memo: OrderBy
  mint: OrderBy
  payer: OrderBy
  promo: OrderBy
  promoGroup: OrderBy
  signature: OrderBy
  slot: OrderBy
  tokenAccount: OrderBy
  transactionType: OrderBy
}

"""
select columns of table "promo_transactions"
"""
enum PromoTransactionsSelectColumn {
  """column name"""
  authority

  """column name"""
  memo

  """column name"""
  mint

  """column name"""
  payer

  """column name"""
  promo

  """column name"""
  promoGroup

  """column name"""
  signature

  """column name"""
  slot

  """column name"""
  tokenAccount

  """column name"""
  transactionType
}

"""
Streaming cursor of the table "promo_transactions"
"""
input PromoTransactionsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PromoTransactionsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PromoTransactionsStreamCursorValueInput {
  authority: String
  memo: jsonb
  mint: String
  payer: String
  promo: String
  promoGroup: String
  signature: String
  slot: bigint
  tokenAccount: String
  transactionType: String
}

"""
columns and relationships of "sign_memo"
"""
type SignMemo {
  createdAt: timestamptz!
  memo(
    """JSON select path"""
    path: String
  ): jsonb
  modifiedAt: timestamptz!
  payer: String!
  signature: String!
  signer: String!
  slot: bigint!
}

"""
Boolean expression to filter rows from the table "sign_memo". All fields are combined with a logical 'AND'.
"""
input SignMemoBoolExp {
  _and: [SignMemoBoolExp!]
  _not: SignMemoBoolExp
  _or: [SignMemoBoolExp!]
  createdAt: TimestamptzComparisonExp
  memo: JsonbComparisonExp
  modifiedAt: TimestamptzComparisonExp
  payer: StringComparisonExp
  signature: StringComparisonExp
  signer: StringComparisonExp
  slot: BigintComparisonExp
}

"""Ordering options when selecting data from "sign_memo"."""
input SignMemoOrderBy {
  createdAt: OrderBy
  memo: OrderBy
  modifiedAt: OrderBy
  payer: OrderBy
  signature: OrderBy
  signer: OrderBy
  slot: OrderBy
}

"""
select columns of table "sign_memo"
"""
enum SignMemoSelectColumn {
  """column name"""
  createdAt

  """column name"""
  memo

  """column name"""
  modifiedAt

  """column name"""
  payer

  """column name"""
  signature

  """column name"""
  signer

  """column name"""
  slot
}

"""
Streaming cursor of the table "sign_memo"
"""
input SignMemoStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: SignMemoStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input SignMemoStreamCursorValueInput {
  createdAt: timestamptz
  memo: jsonb
  modifiedAt: timestamptz
  payer: String
  signature: String
  signer: String
  slot: bigint
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "token_account"
"""
type TokenAccount {
  amount: bigint!
  closeAuthority: String
  createdAt: timestamptz!
  delegate: String
  delegatedAmount: bigint
  id: String!
  isNative: bigint
  mint: String!

  """An object relationship"""
  mintObject: Mint
  modifiedAt: timestamptz!
  owner: String!
  slot: bigint!
  state: String!
  writeVersion: bigint!
}

"""
order by aggregate values of table "token_account"
"""
input TokenAccountAggregateOrderBy {
  avg: token_account_avg_order_by
  count: OrderBy
  max: token_account_max_order_by
  min: token_account_min_order_by
  stddev: token_account_stddev_order_by
  stddev_pop: token_account_stddev_pop_order_by
  stddev_samp: token_account_stddev_samp_order_by
  sum: token_account_sum_order_by
  var_pop: token_account_var_pop_order_by
  var_samp: token_account_var_samp_order_by
  variance: token_account_variance_order_by
}

"""
Boolean expression to filter rows from the table "token_account". All fields are combined with a logical 'AND'.
"""
input TokenAccountBoolExp {
  _and: [TokenAccountBoolExp!]
  _not: TokenAccountBoolExp
  _or: [TokenAccountBoolExp!]
  amount: BigintComparisonExp
  closeAuthority: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  delegate: StringComparisonExp
  delegatedAmount: BigintComparisonExp
  id: StringComparisonExp
  isNative: BigintComparisonExp
  mint: StringComparisonExp
  mintObject: MintBoolExp
  modifiedAt: TimestamptzComparisonExp
  owner: StringComparisonExp
  slot: BigintComparisonExp
  state: StringComparisonExp
  writeVersion: BigintComparisonExp
}

"""Ordering options when selecting data from "token_account"."""
input TokenAccountOrderBy {
  amount: OrderBy
  closeAuthority: OrderBy
  createdAt: OrderBy
  delegate: OrderBy
  delegatedAmount: OrderBy
  id: OrderBy
  isNative: OrderBy
  mint: OrderBy
  mintObject: MintOrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  state: OrderBy
  writeVersion: OrderBy
}

"""
select columns of table "token_account"
"""
enum TokenAccountSelectColumn {
  """column name"""
  amount

  """column name"""
  closeAuthority

  """column name"""
  createdAt

  """column name"""
  delegate

  """column name"""
  delegatedAmount

  """column name"""
  id

  """column name"""
  isNative

  """column name"""
  mint

  """column name"""
  modifiedAt

  """column name"""
  owner

  """column name"""
  slot

  """column name"""
  state

  """column name"""
  writeVersion
}

"""
Streaming cursor of the table "token_account"
"""
input TokenAccountStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TokenAccountStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TokenAccountStreamCursorValueInput {
  amount: bigint
  closeAuthority: String
  createdAt: timestamptz
  delegate: String
  delegatedAmount: bigint
  id: String
  isNative: bigint
  mint: String
  modifiedAt: timestamptz
  owner: String
  slot: bigint
  state: String
  writeVersion: bigint
}

scalar bigint

scalar jsonb

"""
order by avg() on columns of table "promo"
"""
input promo_avg_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by max() on columns of table "promo"
"""
input promo_max_order_by {
  burnCount: OrderBy
  createdAt: OrderBy
  id: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  metadata: OrderBy
  mint: OrderBy
  mintCount: OrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by min() on columns of table "promo"
"""
input promo_min_order_by {
  burnCount: OrderBy
  createdAt: OrderBy
  id: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  metadata: OrderBy
  mint: OrderBy
  mintCount: OrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev() on columns of table "promo"
"""
input promo_stddev_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev_pop() on columns of table "promo"
"""
input promo_stddev_pop_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev_samp() on columns of table "promo"
"""
input promo_stddev_samp_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by sum() on columns of table "promo"
"""
input promo_sum_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by var_pop() on columns of table "promo"
"""
input promo_var_pop_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by var_samp() on columns of table "promo"
"""
input promo_var_samp_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by variance() on columns of table "promo"
"""
input promo_variance_order_by {
  burnCount: OrderBy
  maxBurn: OrderBy
  maxMint: OrderBy
  mintCount: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

type query_root {
  """
  fetch data from the table: "burn_delegated_promo_token"
  """
  burnDelegatedPromoToken(
    """distinct select on columns"""
    distinctOn: [BurnDelegatedPromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BurnDelegatedPromoTokenOrderBy!]

    """filter the rows returned"""
    where: BurnDelegatedPromoTokenBoolExp
  ): [BurnDelegatedPromoToken!]!

  """
  fetch data from the table: "burn_delegated_promo_token" using primary key columns
  """
  burnDelegatedPromoTokenByPk(signature: String!): BurnDelegatedPromoToken

  """
  fetch data from the table: "delegate_promo_token"
  """
  delegatePromoToken(
    """distinct select on columns"""
    distinctOn: [DelegatePromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DelegatePromoTokenOrderBy!]

    """filter the rows returned"""
    where: DelegatePromoTokenBoolExp
  ): [DelegatePromoToken!]!

  """
  fetch data from the table: "delegate_promo_token" using primary key columns
  """
  delegatePromoTokenByPk(signature: String!): DelegatePromoToken

  """
  fetch data from the table: "metadata"
  """
  metadata(
    """distinct select on columns"""
    distinctOn: [MetadataSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MetadataOrderBy!]

    """filter the rows returned"""
    where: MetadataBoolExp
  ): [Metadata!]!

  """fetch data from the table: "metadata" using primary key columns"""
  metadataByPk(id: String!): Metadata

  """
  fetch data from the table: "mint"
  """
  mint(
    """distinct select on columns"""
    distinctOn: [MintSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MintOrderBy!]

    """filter the rows returned"""
    where: MintBoolExp
  ): [Mint!]!

  """fetch data from the table: "mint" using primary key columns"""
  mintByPk(id: String!): Mint

  """
  fetch data from the table: "mint_promo_token"
  """
  mintPromoToken(
    """distinct select on columns"""
    distinctOn: [MintPromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MintPromoTokenOrderBy!]

    """filter the rows returned"""
    where: MintPromoTokenBoolExp
  ): [MintPromoToken!]!

  """
  fetch data from the table: "mint_promo_token" using primary key columns
  """
  mintPromoTokenByPk(signature: String!): MintPromoToken

  """
  fetch data from the table: "promo"
  """
  promo(
    """distinct select on columns"""
    distinctOn: [PromoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoOrderBy!]

    """filter the rows returned"""
    where: PromoBoolExp
  ): [Promo!]!

  """fetch data from the table: "promo" using primary key columns"""
  promoByPk(id: String!): Promo

  """
  fetch data from the table: "promo_group"
  """
  promoGroup(
    """distinct select on columns"""
    distinctOn: [PromoGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoGroupOrderBy!]

    """filter the rows returned"""
    where: PromoGroupBoolExp
  ): [PromoGroup!]!

  """fetch data from the table: "promo_group" using primary key columns"""
  promoGroupByPk(id: String!): PromoGroup

  """
  fetch data from the table: "promo_transactions"
  """
  promoTransactions(
    """distinct select on columns"""
    distinctOn: [PromoTransactionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoTransactionsOrderBy!]

    """filter the rows returned"""
    where: PromoTransactionsBoolExp
  ): [PromoTransactions!]!

  """
  fetch data from the table: "sign_memo"
  """
  signMemo(
    """distinct select on columns"""
    distinctOn: [SignMemoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SignMemoOrderBy!]

    """filter the rows returned"""
    where: SignMemoBoolExp
  ): [SignMemo!]!

  """fetch data from the table: "sign_memo" using primary key columns"""
  signMemoByPk(signature: String!): SignMemo

  """
  fetch data from the table: "token_account"
  """
  tokenAccount(
    """distinct select on columns"""
    distinctOn: [TokenAccountSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TokenAccountOrderBy!]

    """filter the rows returned"""
    where: TokenAccountBoolExp
  ): [TokenAccount!]!

  """fetch data from the table: "token_account" using primary key columns"""
  tokenAccountByPk(id: String!): TokenAccount
}

type subscription_root {
  """
  fetch data from the table: "burn_delegated_promo_token"
  """
  burnDelegatedPromoToken(
    """distinct select on columns"""
    distinctOn: [BurnDelegatedPromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BurnDelegatedPromoTokenOrderBy!]

    """filter the rows returned"""
    where: BurnDelegatedPromoTokenBoolExp
  ): [BurnDelegatedPromoToken!]!

  """
  fetch data from the table: "burn_delegated_promo_token" using primary key columns
  """
  burnDelegatedPromoTokenByPk(signature: String!): BurnDelegatedPromoToken

  """
  fetch data from the table in a streaming manner: "burn_delegated_promo_token"
  """
  burnDelegatedPromoTokenStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [BurnDelegatedPromoTokenStreamCursorInput]!

    """filter the rows returned"""
    where: BurnDelegatedPromoTokenBoolExp
  ): [BurnDelegatedPromoToken!]!

  """
  fetch data from the table: "delegate_promo_token"
  """
  delegatePromoToken(
    """distinct select on columns"""
    distinctOn: [DelegatePromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DelegatePromoTokenOrderBy!]

    """filter the rows returned"""
    where: DelegatePromoTokenBoolExp
  ): [DelegatePromoToken!]!

  """
  fetch data from the table: "delegate_promo_token" using primary key columns
  """
  delegatePromoTokenByPk(signature: String!): DelegatePromoToken

  """
  fetch data from the table in a streaming manner: "delegate_promo_token"
  """
  delegatePromoTokenStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DelegatePromoTokenStreamCursorInput]!

    """filter the rows returned"""
    where: DelegatePromoTokenBoolExp
  ): [DelegatePromoToken!]!

  """
  fetch data from the table: "metadata"
  """
  metadata(
    """distinct select on columns"""
    distinctOn: [MetadataSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MetadataOrderBy!]

    """filter the rows returned"""
    where: MetadataBoolExp
  ): [Metadata!]!

  """fetch data from the table: "metadata" using primary key columns"""
  metadataByPk(id: String!): Metadata

  """
  fetch data from the table in a streaming manner: "metadata"
  """
  metadataStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [MetadataStreamCursorInput]!

    """filter the rows returned"""
    where: MetadataBoolExp
  ): [Metadata!]!

  """
  fetch data from the table: "mint"
  """
  mint(
    """distinct select on columns"""
    distinctOn: [MintSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MintOrderBy!]

    """filter the rows returned"""
    where: MintBoolExp
  ): [Mint!]!

  """fetch data from the table: "mint" using primary key columns"""
  mintByPk(id: String!): Mint

  """
  fetch data from the table: "mint_promo_token"
  """
  mintPromoToken(
    """distinct select on columns"""
    distinctOn: [MintPromoTokenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MintPromoTokenOrderBy!]

    """filter the rows returned"""
    where: MintPromoTokenBoolExp
  ): [MintPromoToken!]!

  """
  fetch data from the table: "mint_promo_token" using primary key columns
  """
  mintPromoTokenByPk(signature: String!): MintPromoToken

  """
  fetch data from the table in a streaming manner: "mint_promo_token"
  """
  mintPromoTokenStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [MintPromoTokenStreamCursorInput]!

    """filter the rows returned"""
    where: MintPromoTokenBoolExp
  ): [MintPromoToken!]!

  """
  fetch data from the table in a streaming manner: "mint"
  """
  mintStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [MintStreamCursorInput]!

    """filter the rows returned"""
    where: MintBoolExp
  ): [Mint!]!

  """
  fetch data from the table: "promo"
  """
  promo(
    """distinct select on columns"""
    distinctOn: [PromoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoOrderBy!]

    """filter the rows returned"""
    where: PromoBoolExp
  ): [Promo!]!

  """fetch data from the table: "promo" using primary key columns"""
  promoByPk(id: String!): Promo

  """
  fetch data from the table: "promo_group"
  """
  promoGroup(
    """distinct select on columns"""
    distinctOn: [PromoGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoGroupOrderBy!]

    """filter the rows returned"""
    where: PromoGroupBoolExp
  ): [PromoGroup!]!

  """fetch data from the table: "promo_group" using primary key columns"""
  promoGroupByPk(id: String!): PromoGroup

  """
  fetch data from the table in a streaming manner: "promo_group"
  """
  promoGroupStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PromoGroupStreamCursorInput]!

    """filter the rows returned"""
    where: PromoGroupBoolExp
  ): [PromoGroup!]!

  """
  fetch data from the table in a streaming manner: "promo"
  """
  promoStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PromoStreamCursorInput]!

    """filter the rows returned"""
    where: PromoBoolExp
  ): [Promo!]!

  """
  fetch data from the table: "promo_transactions"
  """
  promoTransactions(
    """distinct select on columns"""
    distinctOn: [PromoTransactionsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PromoTransactionsOrderBy!]

    """filter the rows returned"""
    where: PromoTransactionsBoolExp
  ): [PromoTransactions!]!

  """
  fetch data from the table in a streaming manner: "promo_transactions"
  """
  promoTransactionsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PromoTransactionsStreamCursorInput]!

    """filter the rows returned"""
    where: PromoTransactionsBoolExp
  ): [PromoTransactions!]!

  """
  fetch data from the table: "sign_memo"
  """
  signMemo(
    """distinct select on columns"""
    distinctOn: [SignMemoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SignMemoOrderBy!]

    """filter the rows returned"""
    where: SignMemoBoolExp
  ): [SignMemo!]!

  """fetch data from the table: "sign_memo" using primary key columns"""
  signMemoByPk(signature: String!): SignMemo

  """
  fetch data from the table in a streaming manner: "sign_memo"
  """
  signMemoStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SignMemoStreamCursorInput]!

    """filter the rows returned"""
    where: SignMemoBoolExp
  ): [SignMemo!]!

  """
  fetch data from the table: "token_account"
  """
  tokenAccount(
    """distinct select on columns"""
    distinctOn: [TokenAccountSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TokenAccountOrderBy!]

    """filter the rows returned"""
    where: TokenAccountBoolExp
  ): [TokenAccount!]!

  """fetch data from the table: "token_account" using primary key columns"""
  tokenAccountByPk(id: String!): TokenAccount

  """
  fetch data from the table in a streaming manner: "token_account"
  """
  tokenAccountStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TokenAccountStreamCursorInput]!

    """filter the rows returned"""
    where: TokenAccountBoolExp
  ): [TokenAccount!]!
}

scalar timestamptz

"""
order by avg() on columns of table "token_account"
"""
input token_account_avg_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by max() on columns of table "token_account"
"""
input token_account_max_order_by {
  amount: OrderBy
  closeAuthority: OrderBy
  createdAt: OrderBy
  delegate: OrderBy
  delegatedAmount: OrderBy
  id: OrderBy
  isNative: OrderBy
  mint: OrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  state: OrderBy
  writeVersion: OrderBy
}

"""
order by min() on columns of table "token_account"
"""
input token_account_min_order_by {
  amount: OrderBy
  closeAuthority: OrderBy
  createdAt: OrderBy
  delegate: OrderBy
  delegatedAmount: OrderBy
  id: OrderBy
  isNative: OrderBy
  mint: OrderBy
  modifiedAt: OrderBy
  owner: OrderBy
  slot: OrderBy
  state: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev() on columns of table "token_account"
"""
input token_account_stddev_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev_pop() on columns of table "token_account"
"""
input token_account_stddev_pop_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by stddev_samp() on columns of table "token_account"
"""
input token_account_stddev_samp_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by sum() on columns of table "token_account"
"""
input token_account_sum_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by var_pop() on columns of table "token_account"
"""
input token_account_var_pop_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by var_samp() on columns of table "token_account"
"""
input token_account_var_samp_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

"""
order by variance() on columns of table "token_account"
"""
input token_account_variance_order_by {
  amount: OrderBy
  delegatedAmount: OrderBy
  isNative: OrderBy
  slot: OrderBy
  writeVersion: OrderBy
}

